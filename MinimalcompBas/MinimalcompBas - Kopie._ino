#include <EEPROM.h>
#include <TVout.h>
#include <fontALL.h>
#include <LinkedList.h>

TVout TV;

struct Line { 
  char *text;
};

LinkedList<Line*> lines = LinkedList<Line*>();

void updateLine(int line);

void setup()  {
  TV.begin(NTSC, 120, 80);
  TV.select_font(font6x8);
  Serial.begin(9600);
  clearLineBuf();
  //saveAll();
  readAll();
  updateLineBuf(0);
  printSB();
}

#define SBW 19
#define SBH 9

char lineBuf[SBW];
int cX, cY, startLine = 0;

void curUp() {
  updateLine(startLine + cY);
  if (cY > 0) {
    cY--;
  } else if (startLine > 0) {
    startLine--;
  }
  updateLineBuf(startLine + cY);
}

void curDown() {
  updateLine(startLine + cY);
  if (cY < (SBH - 1)) {
    cY++;
  } else {
    startLine++;
  }
  updateLineBuf(startLine + cY);
}

void curLeft() {
  if (cX > 0) {
    cX--;
  }
}

void curRight() {
  if (cX < (SBW - 1)) {
    cX++;
  }
}

int escStage = 0;
void loop() {
  if (Serial.available()) {
    char c = Serial.read();
    if (c == 27) {
      escStage = 1;
    } else if (c == '[' && escStage == 1) {
      escStage = 2;
    } else if (escStage == 2) {
      switch (c) {
        case 'D': curLeft(); break;
        case 'B': curDown(); break;
        case 'A': curUp(); break;
        case 'C': curRight(); break;
      }
      escStage = 0;
    } else if (c == 127) {
      curLeft();
      lineBuf[cX] = ' ';
    } else if (c == '\r') {
      curDown();
      cX = 0;
      saveAll();
    }
    else {
      if (cX < SBW) {
        lineBuf[cX] = c;
      }
      curRight();
    }
    printSB();
  }
}

void updateLine(int line) {
  if (line < 0 || line >= lines.size()) {
    // Fehler
  }
  int l = 0;
  for (int i = 0; i < SBW; i++) {
    if (lineBuf[i] != ' ')
      l = i + 1;
  }
  char *newText = (char*)malloc( sizeof(char) * ( l + 1 ) );
  memcpy(newText, lineBuf, l);
  newText[l] = '\0';
  if (line >= lines.size()) {
    struct Line *newLine = (struct Line*)malloc( sizeof(struct Line) );
    newLine->text = newText;
    lines.add(newLine);
  } else {
    if (strcmp(lines.get(line)->text, newText) != 0) {
      free(lines.get(line)->text);
      lines.get(line)->text = newText;
    } else {
      free(newText);
    }
  }
}

void updateLineBuf(int line) {
  if (line < 0 || line >= lines.size()) {
    // Fehler
  }
  char* aktLine = lines.get(line)->text;
  clearLineBuf();
  // Kopiere ohne NULL
  memcpy(lineBuf, aktLine, strlen(aktLine));
}

void printSB() {
  TV.set_cursor(0, 0);
  for (int y = 0; y < SBH; y++) {
    char* akt;
    if (y == cY) {
      akt = lineBuf;
    } else {
      akt = lines.get(startLine + y)->text;
    }
    bool fillBlank = false;
    for (int x = 0; x < SBW; x++) {
      if (akt[x] == '\0')
        fillBlank = true;
      if (x == cX && y == cY) {
        TV.print("#");
      } else {
        if (fillBlank) {
          TV.print(' ');
        } else {
          TV.print(akt[x]);
        }
      }
    }
    if (y < (SBH - 2)) TV.println("");
  }
  TV.print(freeRam());
}

int freeRam () {
  extern int __heap_start, *__brkval;
  int v;
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}

void clearLineBuf() {
  for (int x = 0; x < SBW; x++) {
    lineBuf[x] = ' ';
  }
}

void printInt(int x, int y, int out) {
  char buf[7];
  sprintf(buf, "%1d", out);
  int i = 0;
  while (buf[i] != '\0') {
    if (x + i < SBW) {
      //      sb[x + i][y] = buf[i];
    }
    i++;
  }
}

void printStr(int x, int y, char* buf) {
  int i = 0;
  while (buf[i] != '\0') {
    if (x + i < SBW) {
      //      sb[x + i][y] = buf[i];
    }
    i++;
  }
}

char toUpper(char in) {
  if (in >=  'a' && in <= 'z') {
    return in - 32;
  }
  return in;
}

void saveAll() {
  Line *line;
  int addr = 2;
  for (int i = 0; i < lines.size(); i++) {
    line = lines.get(i);
    char* t = line->text;
    for (int j =  0; j < strlen(t); j++) {
      EEPROM.write(addr++, t[j]);
    }
    EEPROM.write(addr++, 0);
  }
  EEPROM.put(0, (addr - 2));
}

void readAll() {
  int numBytes;
  int addr = 2;
  byte bufPos = 0;
  int line = 0;
  EEPROM.get(0, numBytes);
  for (int i = 0; i < numBytes; i++) {
    char c = EEPROM.read(addr++);
    if (c != 0) {
      lineBuf[bufPos++] = c;
    } else {
      bufPos++;
      updateLine(line++);
      clearLineBuf();
      bufPos = 0;
    }
  }
}
